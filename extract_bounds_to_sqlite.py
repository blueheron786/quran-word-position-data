#!/usr/bin/env python3
"""
Extract Quran word position bounds from MySQL database to SQLite.
This script converts the bounds data generated by the quran.com-images pipeline
from MySQL format to SQLite for easier distribution and use.
"""

import sqlite3
import pymysql
import os
import sys

def connect_mysql():
    """Connect to the MySQL database running in Docker."""
    try:
        connection = pymysql.connect(
            host='localhost',
            port=3306,
            user='nextgen',
            password='nextgen',
            database='nextgen',
            charset='utf8mb4'
        )
        return connection
    except Exception as e:
        print(f"Error connecting to MySQL: {e}")
        return None

def create_sqlite_schema(cursor):
    """Create SQLite database schema for word position bounds."""
    
    # Create tables for word positions and bounds
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS word_bounds (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        page_number INTEGER NOT NULL,
        sura_number INTEGER NOT NULL,
        ayah_number INTEGER NOT NULL,
        word_position INTEGER NOT NULL,
        arabic_word TEXT,
        glyph_code INTEGER,
        img_width INTEGER NOT NULL,
        min_x INTEGER NOT NULL,
        max_x INTEGER NOT NULL,
        min_y INTEGER NOT NULL,
        max_y INTEGER NOT NULL,
        line_number INTEGER,
        line_position INTEGER
    )
    ''')
    
    # Create table for page-level glyph bounds (all glyphs on page)
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS glyph_bounds (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        page_number INTEGER NOT NULL,
        line_number INTEGER NOT NULL,
        line_position INTEGER NOT NULL,
        glyph_code INTEGER NOT NULL,
        img_width INTEGER NOT NULL,
        min_x INTEGER NOT NULL,
        max_x INTEGER NOT NULL,
        min_y INTEGER NOT NULL,
        max_y INTEGER NOT NULL,
        line_type TEXT
    )
    ''')
    
    # Create indexes for performance
    cursor.execute('CREATE INDEX IF NOT EXISTS idx_word_bounds_page ON word_bounds(page_number)')
    cursor.execute('CREATE INDEX IF NOT EXISTS idx_word_bounds_sura_ayah ON word_bounds(sura_number, ayah_number)')
    cursor.execute('CREATE INDEX IF NOT EXISTS idx_glyph_bounds_page ON glyph_bounds(page_number)')
    
    print("SQLite schema created successfully.")

def extract_word_bounds(mysql_cursor, sqlite_cursor):
    """Extract word-level bounds data from MySQL to SQLite."""
    
    query = '''
    SELECT 
        w.page_number,
        w.sura_number,
        w.ayah_number,
        w.position as word_position,
        wa.value as arabic_word,
        g.glyph_code,
        bbox.img_width,
        bbox.min_x,
        bbox.max_x,
        bbox.min_y,
        bbox.max_y,
        gpl.line_number,
        gpl.position as line_position
    FROM word w
    JOIN word_arabic wa ON w.word_arabic_id = wa.word_arabic_id
    JOIN glyph g ON w.glyph_id = g.glyph_id
    JOIN glyph_page_line gpl ON g.glyph_id = gpl.glyph_id
    JOIN glyph_page_line_bbox bbox ON gpl.glyph_page_line_id = bbox.glyph_page_line_id
    ORDER BY w.page_number, w.sura_number, w.ayah_number, w.position
    '''
    
    mysql_cursor.execute(query)
    rows = mysql_cursor.fetchall()
    
    print(f"Extracting {len(rows)} word bounds records...")
    
    sqlite_cursor.executemany('''
    INSERT INTO word_bounds (
        page_number, sura_number, ayah_number, word_position, arabic_word, 
        glyph_code, img_width, min_x, max_x, min_y, max_y, line_number, line_position
    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', rows)
    
    print(f"Inserted {len(rows)} word bounds records.")

def extract_glyph_bounds(mysql_cursor, sqlite_cursor):
    """Extract all glyph bounds data from MySQL to SQLite."""
    
    query = '''
    SELECT 
        gpl.page_number,
        gpl.line_number,
        gpl.position as line_position,
        g.glyph_code,
        bbox.img_width,
        bbox.min_x,
        bbox.max_x,
        bbox.min_y,
        bbox.max_y,
        gpl.line_type
    FROM glyph_page_line gpl
    JOIN glyph g ON gpl.glyph_id = g.glyph_id
    JOIN glyph_page_line_bbox bbox ON gpl.glyph_page_line_id = bbox.glyph_page_line_id
    ORDER BY gpl.page_number, gpl.line_number, gpl.position
    '''
    
    mysql_cursor.execute(query)
    rows = mysql_cursor.fetchall()
    
    print(f"Extracting {len(rows)} glyph bounds records...")
    
    sqlite_cursor.executemany('''
    INSERT INTO glyph_bounds (
        page_number, line_number, line_position, glyph_code, img_width,
        min_x, max_x, min_y, max_y, line_type
    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', rows)
    
    print(f"Inserted {len(rows)} glyph bounds records.")

def create_summary_stats(sqlite_cursor):
    """Create summary statistics for the database."""
    
    sqlite_cursor.execute('SELECT COUNT(*) FROM word_bounds')
    word_count = sqlite_cursor.fetchone()[0]
    
    sqlite_cursor.execute('SELECT COUNT(*) FROM glyph_bounds')
    glyph_count = sqlite_cursor.fetchone()[0]
    
    sqlite_cursor.execute('SELECT COUNT(DISTINCT page_number) FROM word_bounds')
    page_count = sqlite_cursor.fetchone()[0]
    
    sqlite_cursor.execute('SELECT MIN(page_number), MAX(page_number) FROM word_bounds')
    min_page, max_page = sqlite_cursor.fetchone()
    
    sqlite_cursor.execute('SELECT COUNT(DISTINCT img_width) FROM word_bounds')
    width_count = sqlite_cursor.fetchone()[0]
    
    print(f"\nDatabase Summary:")
    print(f"- Word bounds: {word_count:,}")
    print(f"- Glyph bounds: {glyph_count:,}")
    print(f"- Pages: {page_count} (range: {min_page}-{max_page})")
    print(f"- Image widths: {width_count}")

def main():
    """Main function to extract and convert the data."""
    
    print("Extracting Quran word position bounds from MySQL to SQLite...")
    
    # Connect to MySQL
    mysql_conn = connect_mysql()
    if not mysql_conn:
        print("Failed to connect to MySQL. Make sure Docker containers are running.")
        sys.exit(1)
    
    try:
        mysql_cursor = mysql_conn.cursor()
        
        # Create SQLite database
        sqlite_path = 'quran_word_bounds.sqlite'
        if os.path.exists(sqlite_path):
            os.remove(sqlite_path)
            
        sqlite_conn = sqlite3.connect(sqlite_path)
        sqlite_cursor = sqlite_conn.cursor()
        
        # Create schema
        create_sqlite_schema(sqlite_cursor)
        
        # Extract data
        extract_word_bounds(mysql_cursor, sqlite_cursor)
        extract_glyph_bounds(mysql_cursor, sqlite_cursor)
        
        # Commit changes
        sqlite_conn.commit()
        
        # Show summary
        create_summary_stats(sqlite_cursor)
        
        print(f"\nData successfully extracted to: {sqlite_path}")
        
    except Exception as e:
        print(f"Error during extraction: {e}")
        return False
        
    finally:
        if mysql_conn:
            mysql_conn.close()
        if sqlite_conn:
            sqlite_conn.close()
    
    return True

if __name__ == '__main__':
    main()
